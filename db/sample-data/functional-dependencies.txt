Suppose we have the following relation:

![Screenshot 2023-10-11 at 9.39.02 AM.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/a90883b9-e3c0-4f77-8735-ffdd4f9b445b/cba02ed2-2312-4fb7-879d-4425c170eb06/Screenshot_2023-10-11_at_9.39.02_AM.png)

Problems?

- ****city****: two pieces of information are concatenated, so this is not in *first normal form*
    - “not atomic”
    - all attributes must be atomic to be in first normal form
- Suppose we wanted to add 359 new services for Bob Dylan, the same information will ultimately get repeated 359 times.
    - More formally: we have lots of repetition of data, if we discovered a typo in the name or city we’d have to fix it 359 times, instead of just once
    - Not exactly space mindful…

Functional dependency from `service_id --> service`

- Let’s find all the functional dependencies—however we want to avoid “lossy” decomposition
    - We want it do that if we break up the table and then join later on, we have our original table

---

# First Normal Form

Too simple?

- What if we had on order that had attributes item1, cost1, item2, cost2, item3, cost3
    - Not first normal form
    - Not only breaking up into three parts, but also representing each group
    - Also inefficient (500 entries with the same price)

---

# Vocabulary

**********************Satisfies:********************** $r(R)$ satisfies $F$ is all current tuples satisfy the functional dependencies

**********Holds:********** F holds on R if all legal relation instances on R satisfy the functional dependencies F.

******************Trivial:****************** satisfied by all instances of a relation

- *ID*, *name* —> *ID*
- *name* —> *name*
- Generally $\alpha \rightarrow \beta$ is trivial if $\beta \subseteq \alpha$

**************Closure**************: closure of $F$ is the set of ***all*** functional dependencies logically implied by $F$

- Denotes as $F^+$
- $F^+$ is a superset of $F$

---

# Second Normal Form

First normal form has some problems, we’re going to try to address those in second normal form (2NF)

## Definition

A relation schema $R$ is 2NF if for all $\alpha \rightarrow \beta \in F^+$, at least one of the following holds:

- $\alpha \rightarrow \beta$ is trivial
- $\alpha$ is a superkey for $R$
- Each attribute $A$ in $\beta-\alpha$ is either:
    - **********prime**********
    - ************************************not functionally dependent************************************ on a ************subset************ of a candidate key

## More Vocabulary

P**************rime:************** word given to an attribute if it is part of a candidate key

- *********essential********* to uniquely identifying tuples

**********************Non-prime:********************** not part of any candidate key

- ********not essential******** to uniquely identifying tuples

## Example

Functional dependencies on $R$ are the following:

- $\{provider\_id, service\_id\} \rightarrow \{service, doctor, practice, city, price\}$
- $\{service\_id\} \rightarrow \{service\}$
- $\{provider\_id\} \rightarrow \{doctor, practice, city \}$

Consider the three relations:

1. Combination of provider_id and service_id implies price
2. service_id implies the service provided
3. provider_id implies the doctor and practice

## Problems

**Exercise.** The location of medical providers in an area is a crucial factor to determine if a population is well-served. Thus, we might still be interested in managing information about practices, but we face some problems:

1. Insertion Anomalies: How to store new practices that do not have any associated doctor (i.e. doctor)?
    - Doctor would need to be null, which may cause issues
    - Guess what! More functional dependencies here!
2. Update Anomalies: How to change the city associated with some practice?
    - We still need to update every single instance of a practice, as there’s no single practice identifier

---

# Third Normal Form

## Definition

A relation schema $R$ is 2NF if for all $\alpha \rightarrow \beta \in F^+$, at least one of the following holds:

- $\alpha \rightarrow \beta$ is trivial
- $\alpha$ is a superkey for $R$
- Each attribute $A$ in $\beta-\alpha$ is prime (tighter than 2NF)

## Redundancy in 3NF

Redundancy may exist in the schema, example:

- $R=(J,K,L)$
- $F=(JK \rightarrow L, L \rightarrow K)$

Here we have repitition of information — $(I_1,k_1)$

- $L$ is a **determinant** of K

Null values — $(I_2, k_2)$

- If there’s no relation to store the relationship $L \rightarrow K$

### Solving this Issue in the Example

(This is for the activity where price is a determinant of the service)

- We would want to have $Price \rightarrow service\_id$ in another table
- Original table would become $provider\_id \rightarrow Price$
    - Change of price in this table would imply change of service
- Still need some constraints

# Boyce-Codd Normal Form

Every attribute is dependent on a unique candidate key

- 3.5NF

Not always used—every time we want to use a constraint it requires a join, which kinda sucks

# Takeaways

Database should always be 1NF, 2NF, and 3NF

- 3.5NF is unnecessary