We can use the Cartesian product to do joins:

```sql
SELECT * 
FROM course,prereq 
WHERE course.course_id = prereq.course_id
```

However, this generates two identical columns. We can generate the exact same output without the column duplication via using a Natural Join:

```sql
SELECT * 
FROM course 
NATURAL JOIN prereq
```

- This method might be preferable, as we don’t have to deal with the matching and `course_id` isn’t duplicated
- Natural Join joins on all attributes that are common between both relations, however

```sql
SELECT * FROM course JOIN prereq USING (course_id);

-- SELECT * FROM course JOIN prereq ON (course.course_id = prereq.course_id); is also valid
```

- Using only `course_id` to join the tables

# Inner Join

No null values

# Full Outer Join

May lead to inconsistencies, will create a table with a combination of all entries in the two tables, fill those that don’t have an entry with null.

## Right

Preserve everything in the right table

- Gets only courses with a prereq, even if we for some reason don’t have them in our database

```sql
SELECT * FROM course NATURAL RIGHT JOIN prereq
```

![Screenshot 2023-09-22 at 9.51.53 AM.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/a90883b9-e3c0-4f77-8735-ffdd4f9b445b/c782d8bf-533c-48f5-bfae-256ace37aad2/Screenshot_2023-09-22_at_9.51.53_AM.png)

## Left

Opposite, preserves everything in the left table

- Courses without prereqs are included
- Produces null for prereqs since some of these courses not listed in prereqs.

```sql
SELECT * FROM course NATURAL LEFT JOIN prereq
```

![Screenshot 2023-09-22 at 9.55.19 AM.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/a90883b9-e3c0-4f77-8735-ffdd4f9b445b/724db6f5-7fbd-4a7d-9820-7f8f34bf4bde/Screenshot_2023-09-22_at_9.55.19_AM.png)

## Full Outer Join

MySQL doesn’t have this function, however we can do it via the following:

```sql
(SELECT * FROM course NATURAL RIGHT OUTER JOIN prereq)
UNION
(SELECT * FROM course NATURAL LEFT OUTER JOIN prereq);
```

If we wanted to perform some operations:

```sql
SELECT course_id  FROM ((SELECT * FROM course NATURAL RIGHT OUTER JOIN prereq)
UNION
(SELECT * FROM course NATURAL LEFT OUTER JOIN prereq)) as p;
```

Natural Joins have their own operators in relational algebra

- Left is butterfly with left trailing lines
- Right is butterfly with right leading lines
- Natural full is butterfly with lines on both sides

# Updating Values in the Database

```sql
UPDATE instructor 
SET salary = salary + 10000
WHERE name = 'Wu';
```

Gives Wu a raise

- Can also make this conditional (see activity)