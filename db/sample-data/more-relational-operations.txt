(I didn’t take notes in class whoops, here’s what I remember)

Using DBeaver, we kept modifying the file we’ve been modifying for the past few days.

# Foreign Keys

We can introduce constraints to a table, to ensure a key tuple exists in another table. This takes the form:

```sql
CREATE TABLE Student (
	id 			INT,
	name 		VARCHAR(100),
	birthdate 	DATE,
	balance 	DECIMAL,
	PRIMARY KEY (id)
);

CREATE TABLE Major (
  idStudent INT,
  name VARCHAR(45),
  PRIMARY KEY (idStudent, name),
  FOREIGN KEY (idStudent)
  	REFERENCES Student (id)
);
```

Note that in SQLite we need **`PRAGMA** foreign_keys = **ON**;` for this to work

In this example, we’re ensuring the major table’s students must exist in the student table. So if we did:

```sql
-- Student Insert Ops
INSERT INTO Student VALUES ('1', 'Alice', '1981-01-14', 132.3);
INSERT INTO Student VALUES ('2', 'Bob', '1983-02-15', 42);
INSERT INTO Student VALUES ('3', 'Carlos', '1985-03-16', 32);
INSERT INTO Student VALUES ('4', 'Denise', '1987-04-17', 21.3);
INSERT INTO Student VALUES ('5', 'Elmar', '1989-05-18', 400);
INSERT INTO Student VALUES ('6', 'Fernanda', '1989-05-05', 2.3);

-- Major Insert Ops
INSERT INTO Major VALUES ('1', 'Computer Science');
INSERT INTO Major VALUES ('1', 'Mathematics');
INSERT INTO Major VALUES ('2', 'History');
INSERT INTO Major VALUES ('3', 'Chemistry');
INSERT INTO Major VALUES ('4', 'Economics');
INSERT INTO Major VALUES ('5', 'Sociology');
INSERT INTO Major VALUES ('22', 'Hispanic Studies');
```

SQL would error out as there is no student with the id value 22.

In all, this file looks like:

```sql
DROP TABLE IF EXISTS Major;
DROP TABLE IF EXISTS Student;
PRAGMA foreign_keys = ON;
CREATE TABLE Student (
	id INT,
	name VARCHAR(100),
	birthdate DATE,
	balance DECIMAL,
	PRIMARY KEY (id)
);
INSERT INTO Student
VALUES ('1', 'Alice', '1981-01-14', 132.3);
INSERT INTO Student
VALUES ('2', 'Bob', '1983-02-15', 42);
INSERT INTO Student
VALUES ('3', 'Carlos', '1985-03-16', 32);
INSERT INTO Student
VALUES ('4', 'Denise', '1987-04-17', 21.3);
INSERT INTO Student
VALUES ('5', 'Elmar', '1989-05-18', 400);
INSERT INTO Student
VALUES ('6', 'Fernanda', '1989-05-05', 2.3);
CREATE TABLE Major (
	idStudent INT,
	name VARCHAR(45),
	PRIMARY KEY (idStudent, name),
	FOREIGN KEY (idStudent) REFERENCES Student (id)
);
INSERT INTO Major
VALUES ('1', 'Computer Science');
INSERT INTO Major
VALUES ('1', 'Mathematics');
INSERT INTO Major
VALUES ('2', 'History');
INSERT INTO Major
VALUES ('3', 'Chemistry');
INSERT INTO Major
VALUES ('4', 'Economics');
INSERT INTO Major
VALUES ('5', 'Sociology');
INSERT INTO Major 
VALUES ('22', 'Hispanic Studies');
```

Note that we need to drop Major before Student due to the foreign key constraint.

# Fancy Projections and Selections

```sql
SELECT Student.name,
	Student.id,
	Student.balance,
	Student.birthdate,
	Major.name
FROM Student,
	Major
WHERE (
		Major.name = 'Economics'
		OR Major.name = 'Computer Science'
		OR Major.name = 'Mathematics'
		OR Major.name = 'Chemistry'
	)
	AND Student.id = Major.idStudent;
```

In this example, we basically create a cartesian product