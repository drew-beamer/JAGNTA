# Functions

We declare a function in the following manner:

```sql
DROP FUNCTION IF EXISTS dept_countF;

DELIMITER //
CREATE FUNCTION dept_countF (dept_name VARCHAR(20)) RETURNS INTEGER READS SQL DATA BEGIN DECLARE dcount INT;

-- Setting dcount (exhibit A)
SET
    dcount = (
        SELECT
            COUNT(*)
        FROM
            instructor
        WHERE
            instructor.dept_name = dept_name
    );

-- Setting dcount (exhibit B)
SELECT
    COUNT(*) INTO dcount
FROM
    instructor
WHERE
    instructor.dept_name = dept_name;

RETURN dcount;

END
//
DELIMITER ;
```

We can then call the function with 

```sql
SET @abc = dept_countF("History");
SELECT @abc
```

Function to get total instructor budgets for a department:

```sql
DROP FUNCTION IF EXISTS salaryBudget;

DELIMITER //;
CREATE FUNCTION salaryBudget(dept VARCHAR(20)) RETURNS INTEGER READS SQL DATA
BEGIN
	DECLARE dept_sal NUMERIC(10, 2);
	SET dept_sal = (SELECT SUM(salary) FROM instructor
		WHERE dept_name = dept
		GROUP BY dept_name);
	RETURN dept_sal;
END
//

DELIMITER ;

SELECT salaryBudget('History');
```

# Procedures

Used when you want to return a table. To get all salaries:

```sql
DROP PROCEDURE IF EXISTS avgsal;

DELIMITER //
CREATE PROCEDURE avgsal()
BEGIN
SELECT dept_name, AVG(salary) FROM instructor
GROUP BY dept_name;
END
//
DELIMITER ;
```

Then to call it:

```sql
CALL avgsal();
```