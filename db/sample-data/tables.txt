## What we’ve done so far

```sql
CREATE TABLE Major ( idStudent INT, name VARCHAR(45) );

INSERT INTO Major VALUES (1, 'Computer Science');
INSERT INTO Major VALUES (1, 'Mathematics');
INSERT INTO Major VALUES (2, 'History');
INSERT INTO Major VALUES (3, 'Chemistry');
INSERT INTO Major VALUES (4, 'Economics');
INSERT INTO Major VALUES (5, 'Sociology');
```

Creates a table with structure:

| idStudent (INT) | name (VARCHAR(45)) |
| --- | --- |
| 1 | Computer Science |
| 1 | Mathematics |
| 2 | History |
| 3 | Chemistry |
| 4 | Economics |
| 5 | Sociology |

Projecting with selection:

```sql
SELECT idStudent, name FROM Major;
```

What if we wanted to filter?

```sql
SELECT * FROM Major WHERE name = "Chemistry";

-- combining the concepts: get only idStudent of students studying chemistry:
SELECT idStudent FROM Major WHERE name = "Chemistry";
```

Another way to represent this

$$
π_{idStudent}(σ_{name="Chemistry"}(Major))
$$

| Symbol | Name | Description |
| --- | --- | --- |
| $π_{fieldnames}$ | Project | (SELECT) grabs only the selected filenames |
| $σ_{criteria}$ | Select | (WHERE) filters to only the criteria |

## Branching out into other types

```sql
CREATE TABLE Student (
	id        INT,
	name 		  VARCHAR(100),
	birthdate DATE,
	balance 	DECIMAL,
	PRIMARY KEY (id)
);
```

`PRIMARY KEY (id)` prevents IDs from repeating, as no two students will have the same ID

`VARCHAR` allows storage of variable length strings, with specified max length

`DATE` stores dates in a standardized format

`DECIMAL` self-explanatory

`PRIMARY KEY (idStudent, name)` makes it so no *****tuple***** can repeat. Reasons we use:

- A student can double-major
- No student can double major in the same subject
- Multiple students can have the same major

Combining multiple tables:

```sql
SELECT Student.name, Major.name from Student,Major 
WHERE Student.id=Major.idStudent;
```

This is called the ******************cartesian product****************** and is represented with $\times$. Example of usage:

$$
\pi_{Student.name, Major.name}(σ_{Student.ID=Major.idStudent}(Student\times Major))
$$