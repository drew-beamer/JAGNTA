Suppose we wanted to get all students enrolled in 4+ credit courses

- Would be a very ugly query usually

```sql
SELECT * FROM student, takes
WHERE student.id = takes.ID 
AND course_id IN (SELECT course_id FROM course WHERE credits >= 4)
```

- The alternative would look like:

```sql
SELECT * FROM student, takes, course
WHERE student.ID = takes.ID AND
takes.course_id = course.course_id AND
credits >= 4
```

- Can imagine this gets very ugly when having to keep joining tables, perhaps with multiple matching criteria

```sql
SELECT name FROM instructor
WHERE salary > SOME(SELECT budget FROM department
						WHERE building = 'Taylor');
```

- Might only work in MySQL

`EXISTS` - tests if set is empty or not empty

- If we have a course of interest
- TRUE if set is empty, FALSE otherwise

**Example**. List all courses offered in the Fall of 2009 but not in the Spring of 2010. Use a

nested query to search the courses taught in the Spring of 2010.

```sql
SELECT course_id FROM section as S
	WHERE semester = 'Fall' AND year = 2009 AND 
	NOT EXISTS (SELECT course_id FROM section as T
								WHERE semester = 'Spring' AND year = 2010 AND S.course_id = T.course_id);
```

**Exercise**. Why is the query above not returning any tuples?

```sql
SELECT course_id FROM section
				WHERE semester = 'Spring' AND year = 2010;
```

- Returns 7 courses:
CS-101
CS-315
CS-319
CS-319
FIN-201
HIS-351
MU-199

These are the courses offered in the Spring of 2010

NOT EXISTS is being called on a set of 7 items, which exists

- We need to make it “dynamic,” filter based on the outer set

**Exercise**. The solution is to make the “right existential questions.” Ask if each particular

course selected in the outer query exists in the inner query

```sql
SELECT course_id FROM section as S
	WHERE semester = 'Fall' AND year = 2009 AND 
	NOT EXISTS (SELECT course_id FROM section as T
								WHERE semester = 'Spring' AND 
								year = 2010 AND 
								S.course_id = T.course_id);
```

`S.course_id = T.course_id` makes it so that the course’s existence is being evaluated

- then if the course_id matches, and the course was offered in Spring 2010, the set is not empty
- otherwise the set is empty

**Example.** List all course IDs that have been offered only once:

```sql
SELECT course_id FROM
(SELECT course_id, COUNT(*) AS num_offers
FROM teaches
GROUP BY course_id) AS T
WHERE T.num_offers = 1;
```

**Exercise.** How would we express this query using a single select? Which query operator should be used?

```sql
SELECT course_id, COUNT(course_id) as num_offers
FROM teaches
GROUP BY course_id
HAVING num_offers = 1
```

Take note of the solution above in class. This is the preferred solution instead of the iterative

selection/projection exemplified in the beginning of this section.

# Nested Queries in Select Clause

**Example.** Find a list of departments with budget smaller than the average departmental

budget. Start by obtaining the one-tuple departmental budget average from the relation **********department**********

```sql
SELECT AVG(budget) FROM department
```

```sql
SELECT * FROM department, (SELECT AVG(budget) AS avg_budget FROM department) AS T
WHERE T.avg_budget < department.budget
```